
/**
 * Submit selected nodes for execution.
 */
submitNodesForm : function() {
    // Create list of selected nodes to be submitted for execution
    var nodes = []
    var workflow = this.workflow;
    $('.chkSubmittableNode').each(function() {
        if ($(this).is(':checked')) {
            var node_id = $(this).val();
            nodes.push(node_id);
        }
    })
    // Return with message if no rules were selected
    if (nodes.length === 0) {
        $('#submitNodesMessage').html('<div class="alert alert-danger" role="alert">No tasks selected for execution.</div>');
    } else {
        $('#submitNodesMessage').html('');
        this.ui.submitNodesForWorkflow(this.workflow.id, nodes);
    }
},
/**
 * Submit selected rules for execution.
 */
submitRulesForm : function() {
    // Create list of selected rules to be run
    var rules = []
    var workflow = this.workflow;
    $('.chkApplicableRule').each(function() {
        if ($(this).is(':checked')) {
            var rule_id = $(this).val();
            rules.push(rule_id);
        }
    })
    // Return with message if no rules were selected
    if (rules.length === 0) {
        $('#submitRulesMessage').html('<div class="alert alert-danger" role="alert">No rules selected to extend the workflow.</div>');
    } else {
        $('#submitRulesMessage').html('');
        this.ui.applyRulesForWorkflow(this.workflow.id, rules);
    }
}

/**
 * Apply a set of rules for the workflow with the given identifier.
 *
 * workflow_id: string
 * rules: [{id:..., parameter: {key:...,value:...}}]
 */
applyRulesForWorkflow : function(workflow_id, rules) {
    var ui = this;
    $.ajax({
        url: API_BASE_URL + '/workflows/' + workflow_id + '/apply',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({'rules' : rules}),
        success: function(data) {
            ui.reload();
        },
        error: function() {
            alert('There was an error while submitting your request.');
        }
    });
},
/**
 * Delete the current workflow.
 */
deleteCurrentWorkflow : function() {
    // Return if current workflow is not Set
    if (!this.current_workflow) {
        return;
    }
    // Make sure user really wants to delete the workflow
    if (confirm("Do you really want to permanently delete the current workflow ?")) {
        var ui = this;
        $.ajax({
            url: this.current_workflow.url,
            type: 'DELETE',
            contentType: 'application/json',
            success: function(data) {
                ui.reload();
            },
            error: function() {
                alert('There was an error while trying to delete the current workflow.');
            }
        });
    }
},
/**
 * Apply a set of rules for the workflow with the given identifier.
 *
 * workflow_id: string
 * rules: [{id:..., parameter: {key:...,value:...}}]
 */
submitNodesForWorkflow : function(workflow_id, nodes) {
    var ui = this;
    $.ajax({
        url: API_BASE_URL + '/workflows/' + workflow_id + '/submit',
        type: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({'nodes' : nodes}),
        success: function(data) {
            ui.reload();
        },
        error: function() {
            alert('There was an error while submitting your request.');
        }
    });
},
